{   
    "public": {
        "getUser" : "select us.id_user, us.email, us.username, us.password, pr.fk_id_profile, per.name, per.last_name from security.user us INNER JOIN security.user_profile pr ON us.id_user = pr.fk_id_user inner join person as per on per.id_person = us.fk_id_person where us.email = $1",
        "createPerson" : "INSERT INTO public.person (name, last_name) VALUES ($1, $2) RETURNING id_person",
        "getPeople": "SELECT p.id_person, p.name, p.last_name, CONCAT(p.name, ' ', p.last_name) AS fullname FROM person as p",
        "updatePerson": "UPDATE public.person SET name = $1, last_name = $2 WHERE id_person = $3",
        "deletePerson": "DELETE FROM public.person WHERE id_person =  $1",
        "getPersonById": "SELECT * FROM public.person as p INNER JOIN security.user as u ON u.fk_id_person = p.id_person WHERE u.id_user = $1"
    },        
    "notes_movies":
        {
            "getUser" : "select us.id_user, us.email, us.password, pr.fk_id_profile from security.user us INNER JOIN security.user_profile pr ON us.id_user = pr.fk_id_user where us.email = $1",
            "createPerson" : "INSERT INTO public.person (name, last_name, birth_date) VALUES ($1, $2, $3) RETURNING id_person",
            "createNote": "INSERT INTO notes(title, description, date, private, fk_id_user, content, fk_id_weight) VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING id_note",
            "updateNote": "UPDATE notes set title = $1, description = $2, private = $3, content = $4, fk_id_weight = $5, date =$6 where id_note = $7",
            "deleteNote": "DELETE FROM notes WHERE id_note = $1",
            "getFolder": "select * from categories where id_category = $1",
            "deleteNotes": "DELETE FROM notes WHERE id_note = ANY($1::int[])",
            "deleteNotesFromFavs": "DELETE FROM favorites WHERE fk_id_note = ANY($1::int[])",
            "isInFavorites": "SELECT * FROM favorites WHERE fk_id_note = $1 and fk_id_user = $2",
            "deleteNoteFromFolder": "DELETE FROM category_note WHERE fk_id_note = $1",
            "deleteNoteFromFavs": "DELETE FROM favorites WHERE fk_id_note = $1",
            "addFavorite": "INSERT INTO favorites(fk_id_user, fk_id_note) values($1, $2)",
            "removeFavorite": "DELETE FROM favorites where fk_id_note = $1 and fk_id_user = $2",
            "getAllUserNotes": "SELECT n.id_note, n.title, n.description, n.content, n.date, n.private, w.id_weight, w.weight from notes as n inner join security.user as us on n.fk_id_user = us.id_user inner join weight as w on w.id_weight = n.fk_id_weight where us.id_user = $1 ORDER BY w.id_weight ASC, n.title ASC",
            "getPublicNotes": "SELECT n.id_note, n.title, n.description, n.content, n.date, n.private, w.id_weight, w.weight, us.id_user, us.username from notes as n inner join security.user as us on n.fk_id_user = us.id_user inner join weight as w on w.id_weight = n.fk_id_weight where n.private = false ORDER BY n.title ASC",
            "getFavUserNotes": "SELECT n.id_note, n.title, n.description, n.content, n.date from notes as n inner join favorites as f on f.fk_id_note = n.id_note where f.fk_id_user = $1 ORDER BY n.title ASC",           
            "getNotesByFolder": "SELECT n.id_note, n.title, n.description, n.content, n.date, us.id_user, us.username, c.id_category, c.category, n.private, w.id_weight, w.weight FROM notes as n INNER JOIN category_note as cn on cn.fk_id_note = n.id_note inner join categories as c on c.id_category = cn.fk_id_category inner join security.user as us on us.id_user = n.fk_id_user inner join weight as w on w.id_weight = n.fk_id_weight where c.id_category = $1 ORDER BY w.id_weight ASC, n.title ASC",
            "getUserFolders": "SELECT * FROM categories WHERE fk_id_user = $1 ORDER BY id_category",
            "createFolder": "insert into categories (category, fk_id_user) values ($1, $2)",
            "updateFolder": "update categories set category = $2 where id_category = $1",
            "deleteFolder": "DELETE FROM categories WHERE id_category = $1",
            "deleteFolderNotes": "DELETE FROM category_note WHERE fk_id_category = $1",
            "assignNoteFolder": "INSERT INTO category_note(fk_id_category, fk_id_note) values($1, $2)",
            "getPeople": "SELECT p.id_person, p.name, p.last_name, CONCAT(p.name, ' ', p.last_name) AS fullname FROM person as p",
            "updatePerson": "UPDATE public.person SET name = $1, last_name = $2 WHERE id_person = $3",
            "deletePerson": "DELETE FROM public.person WHERE id_person =  $1",
            "getPersonById": "SELECT * FROM public.person as p INNER JOIN security.user as u ON u.fk_id_person = p.id_person WHERE u.id_user = $1",
            "getNotesByUser": "SELECT id_note FROM notes WHERE fk_id_user = $1",
            "deleteFavoritesByNoteIds": "DELETE FROM favorites WHERE fk_id_note = ANY($1::int[])",
            "deleteCategoryNoteByNoteIds": "DELETE FROM category_note WHERE fk_id_note = ANY($1::int[])",
            "deleteNotesByUser": "DELETE FROM notes WHERE fk_id_user = $1",
            "deleteCategoriesByUser": "DELETE FROM categories WHERE fk_id_user = $1",
            "insertMovieGenre": "INSERT INTO genres_movies (id_movie_genre, name) SELECT $1, $2 WHERE NOT EXISTS (SELECT 1 FROM genres_movies WHERE id_movie_genre = $1)",
            "insertSeriesGenre": "INSERT INTO genres_series (id_series_genre, name) SELECT $1, $2 WHERE NOT EXISTS (SELECT 1 FROM genres_series WHERE id_series_genre = $1)",
            "insertMovies": "INSERT INTO movies (id_movie, title, overview, poster, release_date) SELECT $1, $2, $3, $4, $5 WHERE NOT EXISTS (SELECT 1 FROM movies WHERE id_movie = $1)",
            "assignMovieGenre": "INSERT INTO movie_genres (fk_id_movie, fk_id_genre_movie) SELECT $1, $2 WHERE NOT EXISTS (SELECT 1 FROM movie_genres WHERE fk_id_movie = $1 AND fk_id_genre_movie = $2)",
            "insertMovieCast": "INSERT INTO movie_cast (fk_id_movie, name, character, role, id_person) SELECT $1, $2, $3, $4, $5 WHERE NOT EXISTS (SELECT 1 FROM movie_cast WHERE fk_id_movie = $1 AND id_person = $5)",
            "insertSeries": "INSERT INTO series (id_series, name, overview, first_air_date, poster) SELECT $1, $2, $3, $4, $5 WHERE NOT EXISTS (SELECT 1 FROM series WHERE id_series = $1)",
            "assignSeriesGenre": "INSERT INTO series_genres (fk_id_series, fk_id_genre_series) SELECT $1, $2 WHERE NOT EXISTS (SELECT 1 FROM series_genres WHERE fk_id_series = $1 AND fk_id_genre_series = $2)",
            "insertSeriesCast": "INSERT INTO series_cast (fk_id_series, name, role, character, id_person) SELECT $1, $2, $3, $4, $5 WHERE NOT EXISTS (SELECT 1 FROM series_cast WHERE fk_id_series = $1 AND id_person = $5)"
        },
    "security":
        {
            "loadPermission" : "SELECT pr.id_profile, ob.id_object, ob.object, me.id_method, me.method FROM security.permission_method pm INNER JOIN security.profile pr ON pm.fk_id_profile = pr.id_profile INNER JOIN security.method me ON pm.fk_id_method = me.id_method INNER JOIN security.object ob ON me.fk_id_object = ob.id_object",
            "loadMenu" : "SELECT pr.id_profile, me.menu, me.fk_id_module FROM security.permission_menu pm  INNER JOIN security.profile pr ON pm.fk_id_profile = pr.id_profile INNER JOIN security.menu me ON pm.fk_id_menu = me.id_menu",
            "createUser" : "INSERT INTO security.user (email, password, username, fk_id_person) VALUES ($1, $2, $3, $4) RETURNING id_user",
            "updatePassword": "UPDATE security.user SET password = $1 WHERE email = $2",
            "getUserByNumberAndPassword": "SELECT * FROM security.user WHERE number_id = $1 AND password = $2",
            "updateUserEmail": "UPDATE security.user SET email = $1 WHERE number_id = $2 AND password = $3",
            "getUserByEmail": "SELECT * FROM security.user WHERE email = $1",
            "getProfiles": "SELECT * FROM security.profile ORDER BY id_profile",
            "createProfile": "INSERT INTO security.profile (profile) VALUES ($1) RETURNING id_profile, profile",
            "updateProfile": "UPDATE security.profile SET profile = $1 WHERE id_profile = $2 RETURNING id_profile, profile",
            "deleteProfiles": "DELETE FROM security.profile WHERE id_profile = ANY($1::int[])",
            "getUsers": "SELECT us.id_user, pe.id_person,pe.name, pe.last_name, us.email, pr.profile, pr.id_profile, pe.birth_date, us.number_id FROM security.user us INNER JOIN public.person pe ON pe.id_person = us.fk_id_person INNER JOIN security.user_profile uspr ON uspr.fk_id_user = us.id_user INNER JOIN security.profile pr ON pr.id_profile = uspr.fk_id_profile",
            "createUserProfile": "INSERT INTO security.user_profile (fk_id_user, fk_id_profile) VALUES ($1, $2)",
            "updateUser": "UPDATE security.user SET email = $1, password = $2, username = $3 WHERE id_user = $4",

            "updateUserName": "UPDATE security.user SET username = $1 WHERE id_user = $2",

            "updateUserProfile": "UPDATE security.user_profile SET fk_id_profile = $1 WHERE fk_id_user = $2",
            "deleteUserProfileByUserId": "DELETE FROM security.user_profile WHERE fk_id_user = $1",
            "deleteUser": "DELETE FROM security.user WHERE id_user = $1",
            "getUserById": "SELECT id_user, fk_id_person FROM security.user WHERE id_user = ANY($1::int[])",
            "getMenus": "SELECT me.id_menu, me.menu, mo.module, mo.id_module FROM security.menu me INNER JOIN security.module mo ON mo.id_module = me.fk_id_module",
            "getModules": "SELECT * FROM security.module",
            "createMenu": "INSERT INTO security.menu (menu, fk_id_module) VALUES ($1, $2)",
            "updateMenu": "UPDATE security.menu SET menu = $1, fk_id_module = $2 WHERE id_menu = $3",
            "deleteMenus": "DELETE FROM security.menu WHERE id_menu = ANY($1::int[])",
            "createModule": "INSERT INTO security.module (module) VALUES ($1)",
            "updateModule": "UPDATE security.module SET module = $1 WHERE id_module = $2",
            "deleteModules": "DELETE FROM security.module WHERE id_module = ANY($1::int[])",
            "getMethods": "SELECT me.id_method, me.method, me.fk_id_object, ob.object FROM security.method me INNER JOIN security.object ob ON ob.id_object = me.fk_id_object",
            "getObjects": "SELECT * FROM security.object",
            "createMethod": "INSERT INTO security.method (method, fk_id_object) VALUES ($1, $2)",
            "updateMethod": "UPDATE security.method SET method = $1, fk_id_object = $2 WHERE id_method = $3",
            "deleteMethods": "DELETE FROM security.method WHERE id_method = ANY($1::int[])",
            "getpermissionmethods": "SELECT prm.id_permission_method, prm.fk_id_profile, pr.profile, prm.fk_id_method, me.method, ob.object FROM security.permission_method prm INNER JOIN security.profile pr ON pr.id_profile = prm.fk_id_profile INNER JOIN security.method me ON me.id_method = prm.fk_id_method INNER JOIN security.object ob ON ob.id_object = me.fk_id_object",
            "createPermissionMethod": "INSERT INTO security.permission_method (fk_id_profile, fk_id_method) VALUES ($1, $2)",
            "updatePermissionMethod": "UPDATE security.permission_method SET fk_id_profile = $1, fk_id_method = $2 WHERE id_permission_method = $3",
            "deletePermissionMethods": "DELETE FROM security.permission_method WHERE id_permission_method = ANY($1::int[])",
            "getPermissionMenus": "SELECT prm.id_permission_method, prm.fk_id_profile, pr.profile, prm.fk_id_menu, me.menu, mo.id_module FROM security.permission_menu prm INNER JOIN security.profile pr ON pr.id_profile = prm.fk_id_profile INNER JOIN security.menu me ON me.id_menu = prm.fk_id_menu INNER JOIN security.module mo ON mo.id_module = me.fk_id_module",
            "getUserProfiles": "SELECT up.fk_id_profile, p.profile FROM security.user_profile up JOIN security.profile p on up.fk_id_profile = p.id_profile JOIN security.user u ON up.fk_id_user = u.id_user WHERE u.email = $1",
            "createPermissionMenu": "INSERT INTO security.permission_menu (fk_id_profile, fk_id_menu) VALUES ($1, $2)",
            "updatePermissionMenu": "UPDATE security.permission_menu SET fk_id_profile = $1, fk_id_menu = $2 WHERE id_permission_method = $3",
            "deletePermissionMenus": "DELETE FROM security.permission_menu WHERE id_permission_method = ANY($1::int[])",
            "insertAudit": "INSERT INTO security.audit(fk_id_user, method, fk_id_profile, date) values($1,$2,$3,$4::TIMESTAMP)",
            "getAudits": "select a.id_audit, p.name, p.last_name, CONCAT(p.name, ' ', p.last_name) AS fullname, a.method, pr.id_profile, pr.profile, a.date from security.audit as a inner join security.profile as pr on pr.id_profile = a.fk_id_profile inner join security.user as u on u.id_user = a.fk_id_user inner join person as p on p.id_person = u.fk_id_person",
            "deleteAuditByUser": "DELETE FROM security.audit WHERE fk_id_user = $1"
        }
}